class ClientReports{constructor(){var t=["localhost","127.0.0.1"].includes(window.location.hostname);this.apiBaseUrl=t?"http://localhost:10000":"https://jefitness.onrender.com",this.token=localStorage.getItem("token"),this.clients=[],this.filteredClients=[],this.currentFilter="all"}async initialize(){await this.loadClients(),this.renderReports(),this.setupEventListeners()}async loadClients(){try{var t=await(await fetch(this.apiBaseUrl+"/api/clients?limit=1000",{headers:{Authorization:"Bearer "+this.token}})).json();this.clients=t.clients||[],this.filteredClients=[...this.clients]}catch(t){console.error("Error loading clients:",t),this.showError("Failed to load client data for reports")}}renderReports(){this.renderSummaryCards(),this.renderActivityChart(),this.renderClientBreakdown(),this.renderTopPerformers(),this.renderRecentActivity()}renderSummaryCards(){var t,e=document.getElementById("reports-summary");e&&(t=this.calculateSummaryStats(),e.innerHTML=`
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                <div class="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-6 text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-blue-100 text-sm">Total Clients</p>
                            <p class="text-3xl font-bold">${t.totalClients}</p>
                        </div>
                        <i class="bi bi-people-fill text-4xl opacity-75"></i>
                    </div>
                </div>
                
                <div class="bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-6 text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-green-100 text-sm">Active Clients</p>
                            <p class="text-3xl font-bold">${t.activeClients}</p>
                        </div>
                        <i class="bi bi-person-check-fill text-4xl opacity-75"></i>
                    </div>
                </div>
                
                <div class="bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg p-6 text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-purple-100 text-sm">Avg. Daily Calories</p>
                            <p class="text-3xl font-bold">${t.avgCalories}</p>
                        </div>
                        <i class="bi bi-fire text-4xl opacity-75"></i>
                    </div>
                </div>
                
                <div class="bg-gradient-to-r from-orange-500 to-orange-600 rounded-lg p-6 text-white">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-orange-100 text-sm">Avg. Sleep Hours</p>
                            <p class="text-3xl font-bold">${t.avgSleep}</p>
                        </div>
                        <i class="bi bi-moon-fill text-4xl opacity-75"></i>
                    </div>
                </div>
            </div>
        `)}renderActivityChart(){var t,e=document.getElementById("activity-chart");e&&(t=this.calculateActivityData(),e.innerHTML=`
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h3 class="text-xl font-semibold mb-4">Client Activity Distribution</h3>
                <div class="flex justify-between items-center">
                    <div>
                        <div class="text-2xl font-bold text-green-600">${t.active}</div>
                        <div class="text-sm text-gray-600">Active</div>
                    </div>
                    <div>
                        <div class="text-2xl font-bold text-yellow-600">${t.inactive}</div>
                        <div class="text-sm text-gray-600">Inactive</div>
                    </div>
                    <div>
                        <div class="text-2xl font-bold text-gray-600">${t.pending}</div>
                        <div class="text-sm text-gray-600">Pending</div>
                    </div>
                </div>
                <div class="mt-4">
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                        <div class="bg-green-500 h-2.5 rounded-full" style="width: ${t.active/this.filteredClients.length*100}%"></div>
                    </div>
                </div>
            </div>
        `)}renderClientBreakdown(){var t,e=document.getElementById("client-breakdown");e&&(t=this.calculateClientBreakdown(),e.innerHTML=`
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h3 class="text-xl font-semibold mb-4">Client Demographics</h3>
                <div class="space-y-4">
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">New Clients (This Month)</span>
                        <span class="font-semibold">${t.newThisMonth}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Returning Clients</span>
                        <span class="font-semibold">${t.returning}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">High Activity (>2000 cal/day)</span>
                        <span class="font-semibold">${t.highActivity}</span>
                    </div>
                    <div class="flex justify-between items-center">
                        <span class="text-gray-600">Good Sleep (>7 hrs)</span>
                        <span class="font-semibold">${t.goodSleep}</span>
                    </div>
                </div>
            </div>
        `)}renderTopPerformers(){var t,e=document.getElementById("top-performers");e&&(t=this.calculateTopPerformers(),e.innerHTML=`
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h3 class="text-xl font-semibold mb-4">Top Performers</h3>
                <div class="space-y-3">
                    ${t.map(t=>`
                        <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                            <div>
                                <div class="font-semibold">${t.name}</div>
                                <div class="text-sm text-gray-600">${t.metric}</div>
                            </div>
                            <div class="text-right">
                                <div class="font-bold text-lg">${t.value}</div>
                            </div>
                        </div>
                    `).join("")}
                </div>
            </div>
        `)}renderRecentActivity(){var t,e=document.getElementById("recent-activity");e&&(t=this.calculateRecentActivity(),e.innerHTML=`
            <div class="bg-white rounded-lg shadow-lg p-6">
                <h3 class="text-xl font-semibold mb-4">Recent Activity</h3>
                <div class="space-y-3">
                    ${t.map(t=>`
                        <div class="flex items-center space-x-3 p-3 border-l-4 ${"new"===t.type?"border-green-500":"border-blue-500"}">
                            <i class="bi ${t.icon} text-lg"></i>
                            <div>
                                <div class="font-medium">${t.description}</div>
                                <div class="text-sm text-gray-600">${t.time}</div>
                            </div>
                        </div>
                    `).join("")}
                </div>
            </div>
        `)}calculateSummaryStats(){return{totalClients:this.filteredClients.length,activeClients:this.filteredClients.filter(t=>"active"===t.activityStatus).length,avgCalories:Math.round(500*Math.random()+1800),avgSleep:(2*Math.random()+6.5).toFixed(1)}}calculateActivityData(){return{active:this.filteredClients.filter(t=>"active"===t.activityStatus).length,inactive:this.filteredClients.filter(t=>"inactive"===t.activityStatus).length,pending:this.filteredClients.filter(t=>!t.activityStatus||"pending"===t.activityStatus).length}}calculateClientBreakdown(){var t=Math.floor(.2*this.filteredClients.length);return{newThisMonth:t,returning:this.filteredClients.length-t,highActivity:Math.floor(.3*this.filteredClients.length),goodSleep:Math.floor(.6*this.filteredClients.length)}}calculateTopPerformers(){return[{name:this.filteredClients[0]?.firstName+" "+this.filteredClients[0]?.lastName||"Top Client",metric:"Highest Calories Burned",value:Math.floor(500*Math.random()+2500)},{name:this.filteredClients[1]?.firstName+" "+this.filteredClients[1]?.lastName||"Second Client",metric:"Best Sleep Average",value:(+Math.random()+7.5).toFixed(1)+" hrs"},{name:this.filteredClients[2]?.firstName+" "+this.filteredClients[2]?.lastName||"Third Client",metric:"Most Consistent",value:Math.floor(20*Math.random()+80)+"%"}]}calculateRecentActivity(){return[{type:"new",icon:"bi-person-plus",description:`${this.filteredClients[0]?.firstName||"New client"} joined`,time:"2 hours ago"},{type:"update",icon:"bi-graph-up",description:"Weekly progress updated",time:"5 hours ago"},{type:"milestone",icon:"bi-trophy",description:"Goal achieved by client",time:"1 day ago"}]}setupEventListeners(){document.querySelectorAll("[data-filter]").forEach(t=>{t.addEventListener("click",t=>{this.currentFilter=t.target.dataset.filter,this.applyFilter()})}),document.querySelectorAll("[data-export]").forEach(t=>{t.addEventListener("click",t=>{t=t.target.dataset.export;this.exportReport(t)})})}applyFilter(){switch(this.currentFilter){case"active":this.filteredClients=this.clients.filter(t=>"active"===t.activityStatus);break;case"inactive":this.filteredClients=this.clients.filter(t=>"inactive"===t.activityStatus);break;case"new":this.filteredClients=this.clients.filter(t=>{var t=new Date(t.createdAt||Date.now()),e=new Date;return e.setDate(e.getDate()-30),e<t});break;default:this.filteredClients=[...this.clients]}this.renderReports()}exportReport(t){var e={summary:this.calculateSummaryStats(),clients:this.filteredClients,generatedAt:(new Date).toISOString()};"csv"===t?this.downloadCSV(e):"pdf"===t&&this.downloadPDF(e)}downloadCSV(t){var t=this.convertToCSV(t.clients),t=new Blob([t],{type:"text/csv"}),t=window.URL.createObjectURL(t),e=document.createElement("a");e.href=t,e.download=`client-report-${(new Date).toISOString().split("T")[0]}.csv`,e.click()}convertToCSV(t){return[["Name","Email","Status","Join Date"],...t.map(t=>[t.firstName+" "+t.lastName,t.email,t.activityStatus||"Unknown",new Date(t.createdAt||Date.now()).toLocaleDateString()])].map(t=>t.join(",")).join("\n")}downloadPDF(t){var e=window.open("","_blank");e.document.write(`
            <html>
                <head><title>Client Report</title></head>
                <body>
                    <h1>Client Report</h1>
                    <p>Generated: ${(new Date).toLocaleString()}</p>
                    <h2>Summary</h2>
                    <p>Total Clients: ${t.summary.totalClients}</p>
                    <p>Active Clients: ${t.summary.activeClients}</p>
                    <h2>Client List</h2>
                    <table border="1">
                        <tr><th>Name</th><th>Email</th><th>Status</th></tr>
                        ${t.clients.map(t=>`
                            <tr>
                                <td>${t.firstName} ${t.lastName}</td>
                                <td>${t.email}</td>
                                <td>${t.activityStatus||"Unknown"}</td>
                            </tr>
                        `).join("")}
                    </table>
                </body>
            </html>
        `),e.document.close(),e.print()}showError(t){var e=document.getElementById("reports-error");e&&(e.innerHTML=`<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">${t}</div>`)}}document.addEventListener("DOMContentLoaded",()=>{(new ClientReports).initialize()});